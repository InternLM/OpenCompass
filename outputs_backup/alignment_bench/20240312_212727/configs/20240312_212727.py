api_meta_template=dict(
    round=[
        dict(api_role='HUMAN',
            role='HUMAN'),
        dict(api_role='BOT',
            generate=True,
            role='BOT'),
        ])
baichuan=dict(
    abbr='baichuan',
    batch_size=1,
    generation_kwargs=dict(
        do_sample=True),
    max_out_len=2048,
    max_seq_len=4096,
    meta_template=dict(
        round=[
            dict(api_role='HUMAN',
                role='HUMAN'),
            dict(api_role='BOT',
                generate=True,
                role='BOT'),
            ]),
    model_kwargs=dict(
        device_map='auto',
        trust_remote_code=True),
    path='THUDM/chatglm3-6b',
    run_cfg=dict(
        num_gpus=1,
        num_procs=1),
    tokenizer_kwargs=dict(
        padding_side='left',
        truncation_side='left',
        trust_remote_code=True),
    tokenizer_path='THUDM/chatglm3-6b',
    type='opencompass.models.HuggingFaceChatGLM3')
chatglm3=dict(
    abbr='chatglm3-6b-32k-hf',
    batch_size=1,
    generation_kwargs=dict(
        do_sample=True),
    max_out_len=2048,
    max_seq_len=4096,
    meta_template=dict(
        round=[
            dict(api_role='HUMAN',
                role='HUMAN'),
            dict(api_role='BOT',
                generate=True,
                role='BOT'),
            ]),
    model_kwargs=dict(
        device_map='auto',
        trust_remote_code=True),
    path='THUDM/chatglm3-6b',
    run_cfg=dict(
        num_gpus=1,
        num_procs=1),
    tokenizer_kwargs=dict(
        padding_side='left',
        truncation_side='left',
        trust_remote_code=True),
    tokenizer_path='THUDM/chatglm3-6b',
    type='opencompass.models.HuggingFaceChatGLM3')
datasets=[
    dict(abbr='alignment_bench',
        alignment_bench_config_name='multi-dimension',
        alignment_bench_config_path='data/subjective/alignment_bench/config',
        eval_cfg=dict(
            evaluator=dict(
                prompt_template=dict(
                    template=dict(
                        round=[
                            dict(prompt='{critiquellm_prefix}[助手的答案开始]\n{prediction}\n[助手的答案结束]\n',
                                role='HUMAN'),
                            ]),
                    type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
                type='opencompass.openicl.icl_evaluator.LMEvaluator'),
            pred_role='BOT'),
        infer_cfg=dict(
            inferencer=dict(
                max_out_len=2048,
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{question}',
                            role='HUMAN'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        name='alignment_bench',
        path='data/subjective/alignment_bench',
        reader_cfg=dict(
            input_columns=[
                'question',
                'capability',
                'critiquellm_prefix',
                ],
            output_column='judge'),
        type='opencompass.datasets.AlignmentBenchDataset'),
    ]
eval=dict(
    partitioner=dict(
        max_task_size=3000,
        mode='singlescore',
        models=[
            dict(abbr='chatglm3-6b-hf',
                batch_size=1,
                generation_kwargs=dict(
                    do_sample=True),
                max_out_len=2048,
                max_seq_len=4096,
                meta_template=dict(
                    round=[
                        dict(api_role='HUMAN',
                            role='HUMAN'),
                        dict(api_role='BOT',
                            generate=True,
                            role='BOT'),
                        ]),
                model_kwargs=dict(
                    device_map='auto',
                    trust_remote_code=True),
                path='THUDM/chatglm3-6b',
                run_cfg=dict(
                    num_gpus=1,
                    num_procs=1),
                tokenizer_kwargs=dict(
                    padding_side='left',
                    truncation_side='left',
                    trust_remote_code=True),
                tokenizer_path='THUDM/chatglm3-6b',
                type='opencompass.models.HuggingFaceChatGLM3'),
            ],
        type='opencompass.partitioners.sub_size.SubjectiveSizePartitioner'),
    runner=dict(
        max_num_workers=32,
        partition='llm_dev2',
        quotatype='auto',
        task=dict(
            type='opencompass.tasks.subjective_eval.SubjectiveEvalTask'),
        type='opencompass.runners.SlurmSequentialRunner'))
infer=dict(
    partitioner=dict(
        max_task_size=2000,
        type='opencompass.partitioners.SizePartitioner'),
    runner=dict(
        max_num_workers=256,
        partition='llm_dev2',
        quotatype='auto',
        task=dict(
            type='opencompass.tasks.OpenICLInferTask'),
        type='opencompass.runners.SlurmSequentialRunner'))
judge_model=dict(
    abbr='GPT4-Turbo',
    batch_size=8,
    key='xxxx',
    max_out_len=2048,
    max_seq_len=2048,
    meta_template=dict(
        round=[
            dict(api_role='HUMAN',
                role='HUMAN'),
            dict(api_role='BOT',
                generate=True,
                role='BOT'),
            ]),
    path='gpt-4-1106-preview',
    query_per_second=16,
    temperature=0,
    type='opencompass.models.openai_api.OpenAIAllesAPIN',
    url='xxxx')
judge_models=[
    dict(abbr='chatglm3-6b-32k-hf',
        batch_size=1,
        generation_kwargs=dict(
            do_sample=True),
        max_out_len=2048,
        max_seq_len=4096,
        meta_template=dict(
            round=[
                dict(api_role='HUMAN',
                    role='HUMAN'),
                dict(api_role='BOT',
                    generate=True,
                    role='BOT'),
                ]),
        model_kwargs=dict(
            device_map='auto',
            trust_remote_code=True),
        path='THUDM/chatglm3-6b',
        run_cfg=dict(
            num_gpus=1,
            num_procs=1),
        tokenizer_kwargs=dict(
            padding_side='left',
            truncation_side='left',
            trust_remote_code=True),
        tokenizer_path='THUDM/chatglm3-6b',
        type='opencompass.models.HuggingFaceChatGLM3'),
    dict(abbr='baichuan',
        batch_size=1,
        generation_kwargs=dict(
            do_sample=True),
        max_out_len=2048,
        max_seq_len=4096,
        meta_template=dict(
            round=[
                dict(api_role='HUMAN',
                    role='HUMAN'),
                dict(api_role='BOT',
                    generate=True,
                    role='BOT'),
                ]),
        model_kwargs=dict(
            device_map='auto',
            trust_remote_code=True),
        path='THUDM/chatglm3-6b',
        run_cfg=dict(
            num_gpus=1,
            num_procs=1),
        tokenizer_kwargs=dict(
            padding_side='left',
            truncation_side='left',
            trust_remote_code=True),
        tokenizer_path='THUDM/chatglm3-6b',
        type='opencompass.models.HuggingFaceChatGLM3'),
    ]
models=[
    dict(abbr='chatglm3-6b-hf',
        batch_size=1,
        generation_kwargs=dict(
            do_sample=True),
        max_out_len=2048,
        max_seq_len=4096,
        meta_template=dict(
            round=[
                dict(api_role='HUMAN',
                    role='HUMAN'),
                dict(api_role='BOT',
                    generate=True,
                    role='BOT'),
                ]),
        model_kwargs=dict(
            device_map='auto',
            trust_remote_code=True),
        path='THUDM/chatglm3-6b',
        run_cfg=dict(
            num_gpus=1,
            num_procs=1),
        tokenizer_kwargs=dict(
            padding_side='left',
            truncation_side='left',
            trust_remote_code=True),
        tokenizer_path='THUDM/chatglm3-6b',
        type='opencompass.models.HuggingFaceChatGLM3'),
    ]
qwen=dict(
    abbr='qwen',
    batch_size=1,
    generation_kwargs=dict(
        do_sample=True),
    max_out_len=2048,
    max_seq_len=4096,
    meta_template=dict(
        round=[
            dict(api_role='HUMAN',
                role='HUMAN'),
            dict(api_role='BOT',
                generate=True,
                role='BOT'),
            ]),
    model_kwargs=dict(
        device_map='auto',
        trust_remote_code=True),
    path='THUDM/chatglm3-6b',
    run_cfg=dict(
        num_gpus=1,
        num_procs=1),
    tokenizer_kwargs=dict(
        padding_side='left',
        truncation_side='left',
        trust_remote_code=True),
    tokenizer_path='THUDM/chatglm3-6b',
    type='opencompass.models.HuggingFaceChatGLM3')
subjective_datasets=[
    dict(abbr='alignment_bench',
        alignment_bench_config_name='multi-dimension',
        alignment_bench_config_path='data/subjective/alignment_bench/config',
        eval_cfg=dict(
            evaluator=dict(
                prompt_template=dict(
                    template=dict(
                        round=[
                            dict(prompt='{critiquellm_prefix}[助手的答案开始]\n{prediction}\n[助手的答案结束]\n',
                                role='HUMAN'),
                            ]),
                    type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
                type='opencompass.openicl.icl_evaluator.LMEvaluator'),
            pred_role='BOT'),
        infer_cfg=dict(
            inferencer=dict(
                max_out_len=2048,
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{question}',
                            role='HUMAN'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        name='alignment_bench',
        path='data/subjective/alignment_bench',
        reader_cfg=dict(
            input_columns=[
                'question',
                'capability',
                'critiquellm_prefix',
                ],
            output_column='judge'),
        type='opencompass.datasets.AlignmentBenchDataset'),
    ]
summarizer=dict(
    judge_type='general',
    type='opencompass.summarizers.AlignmentBenchSummarizer')
work_dir='outputs/alignment_bench/20240312_212727'